from openai import OpenAI  # type: ignore
from fastapi import HTTPException
import re

# Initialize the client for NVIDIA's API
client = OpenAI(
    base_url="https://integrate.api.nvidia.com/v1",
    api_key="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"
)

async def get_translation(prompt: str) -> str:
    """
    Communicates with NVIDIA's language model (e.g., nvidia/llama-3.1-nemotron-70b-instruct)
    to get the translation or response to the user's input.

    Parameters:
        prompt (str): The system prompt generated by the controller to request a translation.

    Returns:
        str: The translated text returned by the model.

    Raises:
        HTTPException: If an error occurs while interacting with the model, a 500 error is raised.
    """
    try:
        # Call NVIDIA's API to get the model's response
        completion = client.chat.completions.create(
            model="nvidia/llama-3.1-nemotron-70b-instruct",
            messages=[
                {"role": "system", "content":f"{prompt}"}
            ],
            temperature=0.5,
            top_p=1,
            max_tokens=1024,
            stream=True  # Enable streaming to handle large responses incrementally
        )
        
        translated_text = ""
        for chunk in completion:
            if chunk.choices[0].delta.content is not None:
                translated_text += chunk.choices[0].delta.content
        # print(completion)
        translated_text = clean_translation(translated_text)

        return translated_text.strip()  # Clean up any extra spaces or newline characters

    except Exception as e:
        # Handle errors from the API call
        raise HTTPException(status_code=500, detail=f"Error from model: {str(e)}")

import re

def clean_translation(text: str) -> str:
    """
    Clean up the translation text by removing unnecessary characters.
    
    Args:
    - text (str): The text to be cleaned.
    
    Returns:
    - str: The cleaned text.
    """
    # Remove newline characters, markdown formatting, and excessive spaces
    text = re.sub(r'\n+', ' ', text)  # Replace newlines with a single space
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # Remove markdown bold formatting
    text = re.sub(r'\*(.*?)\*', r'\1', text)  # Remove markdown italic formatting
    text = re.sub(r'\`(.*?)\`', r'\1', text)  # Remove markdown code block formatting
    text = re.sub(r'\[.*?\]\(.*?\)', '', text)  # Remove markdown links
    text = re.sub(r'\\\"', '"', text)  # Convert escaped double quotes to regular quotes
    text = re.sub(r'\\n', ' ', text)  # Replace escaped newline characters (\n) with space
    text = re.sub(r'\\r', '', text)  # Remove escaped carriage return characters (\r)
    text = re.sub(r'\s+', ' ', text)  # Replace multiple spaces with a single space
    text = text.strip()  # Remove leading and trailing spaces

    return text
